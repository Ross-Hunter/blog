<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ross-Hunter: code</title>
  <subtitle>Posts tagged with code</subtitle>
  <id>http://www.ross-hunter.com</id>
  <link href="http://www.ross-hunter.com"/>
  <link href="http://www.ross-hunter.com/tag/code/feed.xml" rel="self"/>
  <updated>2018-12-23T00:00:00Z</updated>
  <author>
    <name>Ross Hunter</name>
  </author>
  <entry>
    <title>Don't Test Like That!</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2018/12/23/dont-test-like-that/"/>
    <id>http://www.ross-hunter.com/2018/12/23/dont-test-like-that/</id>
    <published>2018-12-23T00:00:00Z</published>
    <updated>2018-12-24T19:34:58-07:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">As a consultant, I come across a lot of bad test suites in Rails and JavaScript apps. The following are all RSpec, Jest, or Jasmine tests that I have found in the wild – with minor changes for clarity or to protect the guilty :) (myself included!)

These are some simple things not to do, along with some advice about what to do to accomplish the same goal.

Don’t test internals in a system test

System</summary>
  </entry>
  <entry>
    <title>Index Your Foreign Keys</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/06/13/index-foreign-keys/"/>
    <id>http://www.ross-hunter.com/2014/06/13/index-foreign-keys/</id>
    <published>2014-06-13T00:00:00Z</published>
    <updated>2018-12-24T19:34:58-07:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">We add indexes to our database in order to speed up read operations. Basically, an index is a sorted copy of a particular set of columns the database uses to quickly look up the attributes of another table, most commonly, foreign keys of relations. There are several ways this can actually be implemented on the database; essentially, we tell the database which values we’ll be looking up most often and</summary>
  </entry>
  <entry>
    <title>ActiveRecord Associations &amp; You</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/06/12/activerecord-associations/"/>
    <id>http://www.ross-hunter.com/2014/06/12/activerecord-associations/</id>
    <published>2014-06-12T00:00:00Z</published>
    <updated>2018-12-24T19:34:58-07:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">I love abstraction. It’s great to compartmentalize complexity and keep your application modular. SQL is not that. Relying on SQL strings in your code ties your implementation directly to the type, structure, and even the version of your database. ActiveRecord (the ORM behind Rails) is great for letting us focus on our application and not worry so much about the database particulars.

However, understanding</summary>
  </entry>
  <entry>
    <title>(Over)simplify Your Code</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/04/25/oversimplify-your-code/"/>
    <id>http://www.ross-hunter.com/2014/04/25/oversimplify-your-code/</id>
    <published>2014-04-25T00:00:00Z</published>
    <updated>2018-12-24T19:34:58-07:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">One of my eureka moments as a developer came when my programming pair suggested I separate some very simple math in the body of a method into another method. At the time it seemed like overkill to create an entirely new method when the operation was so simple. Wouldn’t that make it more complicated? But I quickly realized the benefits outweighed the cost.

The first benefit is code reuse. This is rather</summary>
  </entry>
  <entry>
    <title>Math Is Not Necessary for Software Development</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/01/14/math/"/>
    <id>http://www.ross-hunter.com/2014/01/14/math/</id>
    <published>2014-01-14T00:00:00Z</published>
    <updated>2018-12-24T19:34:58-07:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">As a developer, written communication and reading comprehension are more valuable than math proficiency.

Sometimes, I tweet. When I tweet, sometimes people agree with me. One such occasion happened recently when I said this.

Modern software development has way more to do with reading comprehension and written communication than math.— Ross Hunter (@Ross_Hunter) November 30, 2013




This was part</summary>
  </entry>
  <entry>
    <title>Open + Download Native Apps with a PhoneGap/Cordova Plugin</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2013/11/12/open-native-apps-phonegap/"/>
    <id>http://www.ross-hunter.com/2013/11/12/open-native-apps-phonegap/</id>
    <published>2013-11-12T00:00:00Z</published>
    <updated>2018-12-24T19:34:58-07:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">Are you working on a PhoneGap/Cordova app that needs to be able to communicate with other native applications? You may want to get the demo code, maybe give it a once over, and then continue reading.

Note: This work was completed in a pre-PhoneGap 3.0.0 world. There is now a Plugin Specification Guide that should be adhered to. This code would need to be adapted to fit that structure.

Prologue

</summary>
  </entry>
</feed>
