<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ross-Hunter</title>
  <subtitle>Doing the whole "software" thing.</subtitle>
  <id>http://www.ross-hunter.com</id>
  <link href="http://www.ross-hunter.com"/>
  <link href="http://www.ross-hunter.com/feed.xml" rel="self"/>
  <updated>2018-12-23T00:00:00Z</updated>
  <author>
    <name>Ross Hunter</name>
  </author>
  <entry>
    <title>Don't Test Like That!</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2018/12/23/dont-test-like-that/"/>
    <id>http://www.ross-hunter.com/2018/12/23/dont-test-like-that/</id>
    <published>2018-12-23T00:00:00Z</published>
    <updated>2021-06-14T09:21:33-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">As a consultant, I come across a lot of bad test suites in Rails and JavaScript apps. The following are all RSpec, Jest, or Jasmine tests that I have found in the wild – with minor changes for clarity or to protect the guilty :) (myself included!)

These are some simple things not to do, along with some advice about what to do to accomplish the same goal.

Don’t test internals in a system test

System</summary>
  </entry>
  <entry>
    <title>The New Best Practices Podcast</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2018/02/09/the-new-best-practices-podcast/"/>
    <id>http://www.ross-hunter.com/2018/02/09/the-new-best-practices-podcast/</id>
    <published>2018-02-09T00:00:00Z</published>
    <updated>2021-06-14T09:21:33-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">Hey everyone! We recently published the first couple episodes of my podcast The New Best Practices. Long-time friends and collaborators Jason Sich, Jace Browning, and myself discuss the process of creating software.

Our first four episode topics cover:


Code Review
Code Comments
YAGNI
Story Points


We are unlikely to ever have episodes like “What’s new in technology XYZ”, and instead we have upcoming</summary>
  </entry>
  <entry>
    <title>JSON API Helpers for API Testing in Rails using Airborne</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2017/01/16/json-api-airborne-expectation-helpers/"/>
    <id>http://www.ross-hunter.com/2017/01/16/json-api-airborne-expectation-helpers/</id>
    <published>2017-01-16T00:00:00Z</published>
    <updated>2021-06-14T09:21:33-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">Update 05/08/2017
I made a gem! https://github.com/Ross-Hunter/jsonapi_expectations

I am a huge fan of the Airborne gem for testing APIs. Airborne uses rest_client to make HTTP requests and provides the following properties for use in your tests.



response - The HTTP response returned from the request

headers - A symbolized hash of the response headers returned by the request

body - The raw HTTP
</summary>
  </entry>
  <entry>
    <title>Topic Based Retro</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2016/05/09/topic-based-retro/"/>
    <id>http://www.ross-hunter.com/2016/05/09/topic-based-retro/</id>
    <published>2016-05-09T00:00:00Z</published>
    <updated>2021-06-14T09:21:33-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">At Modustri we have always had weekly retrospectives amongst the dev team. We tried a couple different formats, but now we do a simple format that we call a “topic-based” retro.

The concept is simple, throughout the course of the week, if you run into something that you would like to discuss with the whole dev team, you simply post it into our “retros” slack channel, and we will cover it at our weekly</summary>
  </entry>
  <entry>
    <title>Index Your Foreign Keys</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/06/13/index-foreign-keys/"/>
    <id>http://www.ross-hunter.com/2014/06/13/index-foreign-keys/</id>
    <published>2014-06-13T00:00:00Z</published>
    <updated>2021-06-14T09:21:33-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">We add indexes to our database in order to speed up read operations. Basically, an index is a sorted copy of a particular set of columns the database uses to quickly look up the attributes of another table, most commonly, foreign keys of relations. There are several ways this can actually be implemented on the database; essentially, we tell the database which values we’ll be looking up most often and</summary>
  </entry>
  <entry>
    <title>ActiveRecord Associations &amp; You</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/06/12/activerecord-associations/"/>
    <id>http://www.ross-hunter.com/2014/06/12/activerecord-associations/</id>
    <published>2014-06-12T00:00:00Z</published>
    <updated>2021-06-14T09:21:33-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">I love abstraction. It’s great to compartmentalize complexity and keep your application modular. SQL is not that. Relying on SQL strings in your code ties your implementation directly to the type, structure, and even the version of your database. ActiveRecord (the ORM behind Rails) is great for letting us focus on our application and not worry so much about the database particulars.

However, understanding</summary>
  </entry>
</feed>
