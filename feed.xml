<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ross-Hunter</title>
  <subtitle>Doing the whole "software" thing.</subtitle>
  <id>http://www.ross-hunter.com</id>
  <link href="http://www.ross-hunter.com"/>
  <link href="http://www.ross-hunter.com/feed.xml" rel="self"/>
  <updated>2017-01-15T19:00:00-05:00</updated>
  <author>
    <name>Ross Hunter</name>
  </author>
  <entry>
    <title>JSON API Helpers for API Testing in Rails using Airborne</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2017/01/16/json-api-airborne-expectation-helpers/"/>
    <id>http://www.ross-hunter.com/2017/01/16/json-api-airborne-expectation-helpers/</id>
    <published>2017-01-15T19:00:00-05:00</published>
    <updated>2017-05-08T23:53:15-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">I am a huge fan of the Airborne gem for testing APIs. Airborne uses rest_client to make HTTP requests and provides the following properties for use in your tests.



response - The HTTP response returned from the request

headers - A symbolized hash of the response headers returned by the request

body - The raw HTTP body returned from the request

json_body - A symbolized hash representation of the JSON
</summary>
  </entry>
  <entry>
    <title>Topic Based Retro</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2016/05/09/topic-based-retro/"/>
    <id>http://www.ross-hunter.com/2016/05/09/topic-based-retro/</id>
    <published>2016-05-08T20:00:00-04:00</published>
    <updated>2017-05-08T23:53:15-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">At Modustri we have always had weekly retrospectives amongst the dev team. We tried a couple different formats, but now we do a simple format that we call a “topic-based” retro.

The concept is simple, throughout the course of the week, if you run into something that you would like to discuss with the whole dev team, you simply post it into our “retros” slack channel, and we will cover it at our weekly</summary>
  </entry>
  <entry>
    <title>Index Your Foreign Keys</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/06/13/index-foreign-keys/"/>
    <id>http://www.ross-hunter.com/2014/06/13/index-foreign-keys/</id>
    <published>2014-06-12T20:00:00-04:00</published>
    <updated>2017-05-08T23:53:15-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">We add indexes to our database in order to speed up read operations. Basically, an index is a sorted copy of a particular set of columns the database uses to quickly look up the attributes of another table, most commonly, foreign keys of relations. There are several ways this can actually be implemented on the database; essentially, we tell the database which values we’ll be looking up most often and</summary>
  </entry>
  <entry>
    <title>ActiveRecord Associations &amp; You</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/06/12/activerecord-associations/"/>
    <id>http://www.ross-hunter.com/2014/06/12/activerecord-associations/</id>
    <published>2014-06-11T20:00:00-04:00</published>
    <updated>2017-05-08T23:53:15-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">I love abstraction. It’s great to compartmentalize complexity and keep your application modular. SQL is not that. Relying on SQL strings in your code ties your implementation directly to the type, structure, and even the version of your database. ActiveRecord (the ORM behind Rails) is great for letting us focus on our application and not worry so much about the database particulars.

However, understanding</summary>
  </entry>
  <entry>
    <title>(Over)simplify Your Code</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/04/25/oversimplify-your-code/"/>
    <id>http://www.ross-hunter.com/2014/04/25/oversimplify-your-code/</id>
    <published>2014-04-24T20:00:00-04:00</published>
    <updated>2017-05-08T23:53:15-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">One of my eureka moments as a developer came when my programming pair suggested I separate some very simple math in the body of a method into another method. At the time it seemed like overkill to create an entirely new method when the operation was so simple. Wouldn’t that make it more complicated? But I quickly realized the benefits outweighed the cost.

The first benefit is code reuse. This is rather</summary>
  </entry>
  <entry>
    <title>Math Is Not Necessary for Software Development</title>
    <link rel="alternate" href="http://www.ross-hunter.com/2014/01/14/math/"/>
    <id>http://www.ross-hunter.com/2014/01/14/math/</id>
    <published>2014-01-13T19:00:00-05:00</published>
    <updated>2017-05-08T23:53:15-04:00</updated>
    <author>
      <name>Ross Hunter</name>
    </author>
    <summary type="html">As a developer, written communication and reading comprehension are more valuable than math proficiency.

Sometimes, I tweet. When I tweet, sometimes people agree with me. One such occasion happened recently when I said this.

Modern software development has way more to do with reading comprehension and written communication than math.— Ross Hunter (@Ross_Hunter) November 30, 2013




This was part</summary>
  </entry>
</feed>
